trigger:
- develop
- master
- feature*
- release*
- bug*

pool:
  name: Hosted Windows 2019 with VS2019

variables:
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: 1
  - name: solution
    value: 'ExifToolAsync.sln'
  - name: buildPlatform
    value: 'x64'
  - name: buildConfiguration
    value: 'Release'
  - group: AsyncExifTool

steps:
- checkout: self
  clean: true
  submodules: recursive
  persistCredentials: true

- task: PowerShell@2
  displayName: 'install exiftool'
  inputs:
    filePath: 'scripts\InstallExiftool.ps1'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: $(solution)
    feedsToUse: 'select'
    nugetConfigPath: nuget.config

- script: dotnet build --configuration $(buildConfiguration) --no-restore
  displayName: 'dotnet build $(buildConfiguration)'

# Run tests and recored coverage.
# Recording coverage is done using coverlet and can be enabled for each test project by adding the nuget package 'coverlet.msbuild'
# when the package is not referenced, no coverage is recorded but the tests are run normally.
# It looks like this task will suffix the arguments with '--results-directory $(Agent.TempDirectory)'
- task: DotNetCoreCLI@2
  displayName: 'Test and calculate code coverage'
  inputs:
    command: test
    projects: 'tests\ExifToolAsync.Test\ExifToolAsync.Test.csproj'
#    projects: '$(solution)'
#    arguments: '-c $(buildConfiguration) --no-restore --no-build --logger trx'
    arguments: '-c $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --no-restore --no-build --logger trx'

# Make Azure DevOps aware of the coverage results.
# When there are no test coverage results, this task will generate a warning.
# Because there is only one test project, we do not need to merge the results.
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage to devops'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/coverage.cobertura.xml'

# Install codecov as a dotnet tool
- task: DotNetCoreCLI@2
  displayName: 'Install codecov as dotnet tool'
  inputs:
    command: custom
    custom: tool
    arguments: 'install Codecov.Tool --tool-path $(Build.SourcesDirectory)/tools'

# Publish test coverage results to the codecov account
# $(CodeCovToken) is placed in the DevOps Library 'Z85e' as a secret value.
- script: $(Build.SourcesDirectory)/tools/codecov.exe -f "tests/ExifToolAsync.Test/coverage.cobertura.xml" -t $(CodeCovToken)
  displayName: 'Publish code coverage to CodeCov.io'

# Create nuget packages (nupkg, and snupkg)
- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: pack
    configuration: '$(BuildConfiguration)'
    nobuild: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
