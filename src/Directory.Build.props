<?xml version="1.0" encoding="utf-8"?>
<Project>
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
  </PropertyGroup>

  <PropertyGroup>
    <Authors>Coen van den Munckhof</Authors>
    <Owners>$(Authors)</Owners>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <IncludeSymbols>true</IncludeSymbols>
    <DebugType>embedded</DebugType>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IsPackable>false</IsPackable>
    <Title>AsyncExifTool</Title>
    <PackageId>CoenM.AsyncExifTool</PackageId>
    <PackageDescription>AsynExifTool is a wrapper around the ExifTool lirbary making use of the '-stay-open' argument.</PackageDescription>
    <Description>AsynExifTool is a wrapper around the ExifTool lirbary. This library makes use of the ExifTool '-stay-open' argument to only start the ExifTool proccess once.</Description>
    <PackageTags>ExifTool;AsyncExifTool;Image;Metadata;Exif;</PackageTags>
    <PackageProjectUrl>https://github.com/coenm/AsyncExifTool</PackageProjectUrl>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseExpression>GPL-3.0-or-later</PackageLicenseExpression>
    <RepositoryUrl>$(PackageProjectUrl)</RepositoryUrl>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>

  <PropertyGroup>
    <!--true by default but nevertheless.. -->
    <EnableSourceLink>true</EnableSourceLink>
    <EnableSourceControlManagerQueries>$(EnableSourceLink)</EnableSourceControlManagerQueries>
    <!-- Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- Embed source files that are not tracked by the source control manager in the PDB -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <!-- Include PDB in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <ItemGroup Condition="'$(Configuration)' == 'Release' AND '$(EnableSourceLink)' == 'true'">
    <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)..\icon\AsyncExifTool.512.png" Pack="true" PackagePath="$(PackageIcon)" Visible="false" />
  </ItemGroup>

  <PropertyGroup>
    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)..\AsyncExifTool.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)..\stylecop.json" />
  </ItemGroup>



  <ItemGroup>
    <!-- Make internals visisble for test project (based on convention) -->
    <!-- https://blog.sanderaernouts.com/make-internals-visible-with-new-csproj-format -->
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(AssemblyName).Test</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="StyleCop.Analyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>

    <PackageReference Include="GitVersionTask">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="'$(IsPackable)' == 'true' AND '$(Configuration)' == 'Release' ">
    <!-- For a release, we want to generate ReSharper annotations in a seperate xml file to be included in the package -->
    <PackageReference Include="Fody" >
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <PackageReference Include="JetBrainsAnnotations.Fody">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)../'))" />
</Project>